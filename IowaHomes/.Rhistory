get_prediction <- function(input){
# <- c(input$OverallQual, input$GrLivArea, input$ExterQual, input$GarageArea,
#             input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
#            input$YearBuilt, input$YearRemodAdd)
salesPrice <- useful_data[ ,1]
colnames(useful_data) <- c("SalePrice", colnames(useful_data[,-1]))
k_value <- floor(sqrt(nrow(useful_data)))
model <- train.kknn(formula = SalePrice~., data=useful_data, kmax=k_value, kernel = "optimal")
new_dataframe <- data.frame(input$OverallQual, input$GrLivArea, input$GarageArea,
input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
input$YearBuilt, input$YearRemodAdd)
names(new_dataframe) <- c("OverallQual", "GrLivArea",  "GarageArea", "TotalBsmtSF", "X1stFlrSF", "FullBath", "TotRmsAbvGrd", "YearBuilt", "YearRemodAdd")
prediction2<- predict(model, new_dataframe)
#str(prediction2)
return (round(prediction2, digits = -2))
}
server <- shinyServer(function(input, output) {
output$prediction2 <- renderText({
paste("Predicted Value of ?", get_prediction(input))
})
})
shinyApp(ui, server)
library(kknn)
library(shiny)
library(RMySQL)
library(dbConnect)
#set max numbers
#options(scipen=999)
#data to be used for predictions
#dataset <- read.csv("C:/Users/Admin/Documents/Floor4/copied_from_pc/IowaMove_Project/train.csv", header = TRUE)
#slecting colums for the prediction to use
#useful_data <- dataset[, c("SalePrice", "OverallQual", "GrLivArea",
#                           "GarageArea", "TotalBsmtSF", "X1stFlrSF",
#                          "FullBath", "TotRmsAbvGrd","YearBuilt",
#                         "YearRemodAdd")]
#see which columns have any NA values-------------------------------------------------------------------------------
#na_counts <- as.data.frame(lapply(lapply(useful_data,is.na),sum))
#display the columns with NA---------------------------------------------------------------------------------------
#na_counts
#Write the dataset to a database
#for (i in 1:nrow(useful_data)){
#query <- paste("INSERT INTO Training(User_ID, SalePrice, OverallQual, GrLivArea, GarageArea, TotalBsmtSF, X1stFlrSF, FullBath, TotRmsAbvGrd, YearBuilt, YearRemodAdd) Values(", 1,",", paste(useful_data[i,], collapse = ", "), ")")
#dbGetQuery(con, query)
#}
#splitting data into test and train
#training_rows <- sample(nrow(useful_data), nrow(useful_data)*0.75)
#train_data <- useful_data[training_rows , ]
#k value
#k_value <- floor(sqrt(nrow(train_data)))
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
#create front end application
ui <- shinyUI(fluidPage(
titlePanel("Iowa Homes Price Calculator"),
dashboardPage(skin = "black"),
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
numericInput(inputId = "OverallQual", label = "Overall Quality", value = 0, min = 0, step = 1),
numericInput(inputId = "GrLivArea", label = "Above grade (ground) living area in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "GarageArea", label = "Size of garage in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "TotalBsmtSF", label = "Total square feet of basement area", value = 0, min = 0, step = 1),
numericInput(inputId = "X1stFlrSF", label = "Area of first floor in square", value = 0, min = 0, step = 1),
numericInput(inputId = "FullBath", label = "Number of full bathrooms", value = 0, min = 0, step = 1),
numericInput(inputId = "TotRmsAbvGrd", label = "Total number of rooms above ground", value = 0, min = 0, step = 1),
numericInput(inputId = "YearBuilt", label = "Year house was built", value = 0, min = 0, step = 1),
numericInput(inputId = "YearRemodAdd", label = "Year house was remodelled", value = 0, min = 0, step = 1)
),
# Main panel for displaying outputs ----
mainPanel(
textOutput(outputId = "prediction2")
)
)
))
db_connection<- function(){
con = dbConnect(MySQL(), user='root', password='password', dbname='iowahomedatabase', host='localhost', port=3306)
# dbListTables(con)
query <- ("SELECT SalePrice, OverallQual, GrLivArea, GarageArea, TotalBsmtSF, X1stFlrSF, FullBath, TotRmsAbvGrd, YearBuilt, YearRemodAdd FROM Training")
useful_data <- dbGetQuery(con, query)
dbDisconnect(con)
}
get_prediction <- function(input){
# <- c(input$OverallQual, input$GrLivArea, input$ExterQual, input$GarageArea,
#             input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
#            input$YearBuilt, input$YearRemodAdd)
salesPrice <- useful_data[ ,1]
colnames(useful_data) <- c("SalePrice", colnames(useful_data[,-1]))
k_value <- floor(sqrt(nrow(useful_data)))
model <- train.kknn(formula = SalePrice~., data=useful_data, kmax=k_value, kernel = "optimal")
new_dataframe <- data.frame(input$OverallQual, input$GrLivArea, input$GarageArea,
input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
input$YearBuilt, input$YearRemodAdd)
names(new_dataframe) <- c("OverallQual", "GrLivArea",  "GarageArea", "TotalBsmtSF", "X1stFlrSF", "FullBath", "TotRmsAbvGrd", "YearBuilt", "YearRemodAdd")
prediction2<- predict(model, new_dataframe)
#str(prediction2)
return (round(prediction2, digits = -2))
}
server <- shinyServer(function(input, output) {
output$prediction2 <- renderText({
paste("Predicted Value of ?", get_prediction(input))
})
})
shinyApp(ui, server)
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
#create front end application
ui <- shinyUI(fluidPage(
titlePanel("Iowa Homes Price Calculator"),
dashboardPage(skin = "black"),
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
numericInput(inputId = "OverallQual", label = "Overall Quality", value = 0, min = 0, step = 1),
numericInput(inputId = "GrLivArea", label = "Above grade (ground) living area in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "GarageArea", label = "Size of garage in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "TotalBsmtSF", label = "Total square feet of basement area", value = 0, min = 0, step = 1),
numericInput(inputId = "X1stFlrSF", label = "Area of first floor in square", value = 0, min = 0, step = 1),
numericInput(inputId = "FullBath", label = "Number of full bathrooms", value = 0, min = 0, step = 1),
numericInput(inputId = "TotRmsAbvGrd", label = "Total number of rooms above ground", value = 0, min = 0, step = 1),
numericInput(inputId = "YearBuilt", label = "Year house was built", value = 0, min = 0, step = 1),
numericInput(inputId = "YearRemodAdd", label = "Year house was remodelled", value = 0, min = 0, step = 1)
),
# Main panel for displaying outputs ----
mainPanel(
textOutput(outputId = "prediction2")
)
)
))
ui <- shinyUI(fluidPage(
titlePanel("Iowa Homes Price Calculator"),
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
numericInput(inputId = "OverallQual", label = "Overall Quality", value = 0, min = 0, step = 1),
numericInput(inputId = "GrLivArea", label = "Above grade (ground) living area in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "GarageArea", label = "Size of garage in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "TotalBsmtSF", label = "Total square feet of basement area", value = 0, min = 0, step = 1),
numericInput(inputId = "X1stFlrSF", label = "Area of first floor in square", value = 0, min = 0, step = 1),
numericInput(inputId = "FullBath", label = "Number of full bathrooms", value = 0, min = 0, step = 1),
numericInput(inputId = "TotRmsAbvGrd", label = "Total number of rooms above ground", value = 0, min = 0, step = 1),
numericInput(inputId = "YearBuilt", label = "Year house was built", value = 0, min = 0, step = 1),
numericInput(inputId = "YearRemodAdd", label = "Year house was remodelled", value = 0, min = 0, step = 1)
),
# Main panel for displaying outputs ----
mainPanel(
textOutput(outputId = "prediction2")
)
)
))
db_connection<- function(){
con = dbConnect(MySQL(), user='root', password='password', dbname='iowahomedatabase', host='localhost', port=3306)
# dbListTables(con)
query <- ("SELECT SalePrice, OverallQual, GrLivArea, GarageArea, TotalBsmtSF, X1stFlrSF, FullBath, TotRmsAbvGrd, YearBuilt, YearRemodAdd FROM Training")
useful_data <- dbGetQuery(con, query)
dbDisconnect(con)
}
get_prediction <- function(input){
# <- c(input$OverallQual, input$GrLivArea, input$ExterQual, input$GarageArea,
#             input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
#            input$YearBuilt, input$YearRemodAdd)
salesPrice <- useful_data[ ,1]
colnames(useful_data) <- c("SalePrice", colnames(useful_data[,-1]))
k_value <- floor(sqrt(nrow(useful_data)))
model <- train.kknn(formula = SalePrice~., data=useful_data, kmax=k_value, kernel = "optimal")
new_dataframe <- data.frame(input$OverallQual, input$GrLivArea, input$GarageArea,
input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
input$YearBuilt, input$YearRemodAdd)
names(new_dataframe) <- c("OverallQual", "GrLivArea",  "GarageArea", "TotalBsmtSF", "X1stFlrSF", "FullBath", "TotRmsAbvGrd", "YearBuilt", "YearRemodAdd")
prediction2<- predict(model, new_dataframe)
#str(prediction2)
return (round(prediction2, digits = -2))
}
server <- shinyServer(function(input, output) {
output$prediction2 <- renderText({
paste("Predicted Value of ?", get_prediction(input))
})
})
shinyApp(ui, server)
ui <- shinyUI(fluidPage(
titlePanel("Iowa Homes Price Calculator"),
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
numericInput(inputId = "OverallQual", label = "Overall Quality", value = 0, min = 0, step = 1),
numericInput(inputId = "GrLivArea", label = "Above grade (ground) living area in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "GarageArea", label = "Size of garage in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "TotalBsmtSF", label = "Total square feet of basement area", value = 0, min = 0, step = 1),
numericInput(inputId = "X1stFlrSF", label = "Area of first floor in square", value = 0, min = 0, step = 1),
numericInput(inputId = "FullBath", label = "Number of full bathrooms", value = 0, min = 0, step = 1),
numericInput(inputId = "TotRmsAbvGrd", label = "Total number of rooms above ground", value = 0, min = 0, step = 1),
numericInput(inputId = "YearBuilt", label = "Year house was built", value = 0, min = 0, step = 1),
numericInput(inputId = "YearRemodAdd", label = "Year house was remodelled", value = 0, min = 0, step = 1)
),
# Main panel for displaying outputs ----
mainPanel(
textOutput(outputId = "prediction2")
)
)
))
db_connection<- function(){
con = dbConnect(MySQL(), user='root', password='password', dbname='iowahomedatabase', host='localhost', port=3306)
# dbListTables(con)
query <- ("SELECT SalePrice, OverallQual, GrLivArea, GarageArea, TotalBsmtSF, X1stFlrSF, FullBath, TotRmsAbvGrd, YearBuilt, YearRemodAdd FROM Training")
useful_data <- dbGetQuery(con, query)
dbDisconnect(con)
}
get_prediction <- function(input){
# <- c(input$OverallQual, input$GrLivArea, input$ExterQual, input$GarageArea,
#             input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
#            input$YearBuilt, input$YearRemodAdd)
salesPrice <- useful_data[ ,1]
colnames(useful_data) <- c("SalePrice", colnames(useful_data[,-1]))
k_value <- floor(sqrt(nrow(useful_data)))
model <- train.kknn(formula = SalePrice~., data=useful_data, kmax=k_value, kernel = "optimal")
new_dataframe <- data.frame(input$OverallQual, input$GrLivArea, input$GarageArea,
input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
input$YearBuilt, input$YearRemodAdd)
names(new_dataframe) <- c("OverallQual", "GrLivArea",  "GarageArea", "TotalBsmtSF", "X1stFlrSF", "FullBath", "TotRmsAbvGrd", "YearBuilt", "YearRemodAdd")
prediction2<- predict(model, new_dataframe)
#str(prediction2)
return (round(prediction2, digits = -2))
}
server <- shinyServer(function(input, output) {
output$prediction2 <- renderText({
paste("Predicted Value of ?", get_prediction(input))
})
shinyApp(ui, server)
ui <- shinyUI(fluidPage(
titlePanel("Iowa Homes Price Calculator"),
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
numericInput(inputId = "OverallQual", label = "Overall Quality", value = 0, min = 0, step = 1),
numericInput(inputId = "GrLivArea", label = "Above grade (ground) living area in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "GarageArea", label = "Size of garage in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "TotalBsmtSF", label = "Total square feet of basement area", value = 0, min = 0, step = 1),
numericInput(inputId = "X1stFlrSF", label = "Area of first floor in square", value = 0, min = 0, step = 1),
numericInput(inputId = "FullBath", label = "Number of full bathrooms", value = 0, min = 0, step = 1),
numericInput(inputId = "TotRmsAbvGrd", label = "Total number of rooms above ground", value = 0, min = 0, step = 1),
numericInput(inputId = "YearBuilt", label = "Year house was built", value = 0, min = 0, step = 1),
numericInput(inputId = "YearRemodAdd", label = "Year house was remodelled", value = 0, min = 0, step = 1)
),
# Main panel for displaying outputs ----
mainPanel(
textOutput(outputId = "prediction2")
)
)
))
db_connection<- function(){
con = dbConnect(MySQL(), user='root', password='password', dbname='iowahomedatabase', host='localhost', port=3306)
# dbListTables(con)
query <- ("SELECT SalePrice, OverallQual, GrLivArea, GarageArea, TotalBsmtSF, X1stFlrSF, FullBath, TotRmsAbvGrd, YearBuilt, YearRemodAdd FROM Training")
useful_data <- dbGetQuery(con, query)
dbDisconnect(con)
}
get_prediction <- function(input){
# <- c(input$OverallQual, input$GrLivArea, input$ExterQual, input$GarageArea,
#             input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
#            input$YearBuilt, input$YearRemodAdd)
salesPrice <- useful_data[ ,1]
colnames(useful_data) <- c("SalePrice", colnames(useful_data[,-1]))
k_value <- floor(sqrt(nrow(useful_data)))
model <- train.kknn(formula = SalePrice~., data=useful_data, kmax=k_value, kernel = "optimal")
new_dataframe <- data.frame(input$OverallQual, input$GrLivArea, input$GarageArea,
input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
input$YearBuilt, input$YearRemodAdd)
names(new_dataframe) <- c("OverallQual", "GrLivArea",  "GarageArea", "TotalBsmtSF", "X1stFlrSF", "FullBath", "TotRmsAbvGrd", "YearBuilt", "YearRemodAdd")
prediction2<- predict(model, new_dataframe)
#str(prediction2)
return (round(prediction2, digits = -2))
}
server <- shinyServer(function(input, output) {
output$prediction2 <- renderText({
paste("Predicted Value of ?", get_prediction(input))
})
})
shinyApp(ui, server)
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
#create front end application
ui <- shinyUI(fluidPage(
titlePanel("Iowa Homes Price Calculator"),
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
numericInput(inputId = "OverallQual", label = "Overall Quality", value = 0, min = 0, step = 1),
numericInput(inputId = "GrLivArea", label = "Above grade (ground) living area in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "GarageArea", label = "Size of garage in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "TotalBsmtSF", label = "Total square feet of basement area", value = 0, min = 0, step = 1),
numericInput(inputId = "X1stFlrSF", label = "Area of first floor in square", value = 0, min = 0, step = 1),
numericInput(inputId = "FullBath", label = "Number of full bathrooms", value = 0, min = 0, step = 1),
numericInput(inputId = "TotRmsAbvGrd", label = "Total number of rooms above ground", value = 0, min = 0, step = 1),
numericInput(inputId = "YearBuilt", label = "Year house was built", value = 0, min = 0, step = 1),
numericInput(inputId = "YearRemodAdd", label = "Year house was remodelled", value = 0, min = 0, step = 1)
),
# Main panel for displaying outputs ----
mainPanel(
textOutput(outputId = "prediction2")
)
)
))
db_connection<- function(){
con = dbConnect(MySQL(), user='root', password='password', dbname='iowahomedatabase', host='localhost', port=3306)
# dbListTables(con)
query <- ("SELECT SalePrice, OverallQual, GrLivArea, GarageArea, TotalBsmtSF, X1stFlrSF, FullBath, TotRmsAbvGrd, YearBuilt, YearRemodAdd FROM Training")
useful_data <- dbGetQuery(con, query)
dbDisconnect(con)
}
get_prediction <- function(input){
# <- c(input$OverallQual, input$GrLivArea, input$ExterQual, input$GarageArea,
#             input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
#            input$YearBuilt, input$YearRemodAdd)
salesPrice <- useful_data[ ,1]
colnames(useful_data) <- c("SalePrice", colnames(useful_data[,-1]))
k_value <- floor(sqrt(nrow(useful_data)))
model <- train.kknn(formula = SalePrice~., data=useful_data, kmax=k_value, kernel = "optimal")
new_dataframe <- data.frame(input$OverallQual, input$GrLivArea, input$GarageArea,
input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
input$YearBuilt, input$YearRemodAdd)
names(new_dataframe) <- c("OverallQual", "GrLivArea",  "GarageArea", "TotalBsmtSF", "X1stFlrSF", "FullBath", "TotRmsAbvGrd", "YearBuilt", "YearRemodAdd")
prediction2<- predict(model, new_dataframe)
#str(prediction2)
return (round(prediction2, digits = -2))
}
server <- shinyServer(function(input, output) {
output$prediction2 <- renderText({
paste("Predicted Value of ?", get_prediction(input))
})
})
shinyApp(ui, server)
install.packages('kknn')
install.packages("shiny")
install.packages("RMySQL")
install.packages("dbConnect")
library(shiny); runApp('R/IowaHomesPredictionsShinySQL.r')
library(kknn)
library(shiny)
library(RMySQL)
library(dbConnect)
#set max numbers
#options(scipen=999)
#data to be used for predictions
#dataset <- read.csv("C:/Users/Admin/Documents/Floor4/copied_from_pc/IowaMove_Project/train.csv", header = TRUE)
#slecting colums for the prediction to use
#useful_data <- dataset[, c("SalePrice", "OverallQual", "GrLivArea",
#                           "GarageArea", "TotalBsmtSF", "X1stFlrSF",
#                          "FullBath", "TotRmsAbvGrd","YearBuilt",
#                         "YearRemodAdd")]
#see which columns have any NA values-------------------------------------------------------------------------------
#na_counts <- as.data.frame(lapply(lapply(useful_data,is.na),sum))
#display the columns with NA---------------------------------------------------------------------------------------
#na_counts
#Write the dataset to a database
#for (i in 1:nrow(useful_data)){
#query <- paste("INSERT INTO Training(User_ID, SalePrice, OverallQual, GrLivArea, GarageArea, TotalBsmtSF, X1stFlrSF, FullBath, TotRmsAbvGrd, YearBuilt, YearRemodAdd) Values(", 1,",", paste(useful_data[i,], collapse = ", "), ")")
#dbGetQuery(con, query)
#}
#splitting data into test and train
#training_rows <- sample(nrow(useful_data), nrow(useful_data)*0.75)
#train_data <- useful_data[training_rows , ]
#k value
#k_value <- floor(sqrt(nrow(train_data)))
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
#create front end application
ui <- shinyUI(fluidPage(
titlePanel("Iowa Homes Price Calculator"),
dashboardPage(skin = "black"),
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
numericInput(inputId = "OverallQual", label = "Overall Quality", value = 0, min = 0, step = 1),
numericInput(inputId = "GrLivArea", label = "Above grade (ground) living area in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "GarageArea", label = "Size of garage in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "TotalBsmtSF", label = "Total square feet of basement area", value = 0, min = 0, step = 1),
numericInput(inputId = "X1stFlrSF", label = "Area of first floor in square", value = 0, min = 0, step = 1),
numericInput(inputId = "FullBath", label = "Number of full bathrooms", value = 0, min = 0, step = 1),
numericInput(inputId = "TotRmsAbvGrd", label = "Total number of rooms above ground", value = 0, min = 0, step = 1),
numericInput(inputId = "YearBuilt", label = "Year house was built", value = 0, min = 0, step = 1),
numericInput(inputId = "YearRemodAdd", label = "Year house was remodelled", value = 0, min = 0, step = 1)
),
# Main panel for displaying outputs ----
mainPanel(
textOutput(outputId = "prediction2")
)
)
))
db_connection<- function(){
con = dbConnect(MySQL(), user='root', password='password', dbname='iowahomedatabase', host='localhost', port=3306)
# dbListTables(con)
query <- ("SELECT SalePrice, OverallQual, GrLivArea, GarageArea, TotalBsmtSF, X1stFlrSF, FullBath, TotRmsAbvGrd, YearBuilt, YearRemodAdd FROM Training")
useful_data <- dbGetQuery(con, query)
dbDisconnect(con)
}
get_prediction <- function(input){
# <- c(input$OverallQual, input$GrLivArea, input$ExterQual, input$GarageArea,
#             input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
#            input$YearBuilt, input$YearRemodAdd)
salesPrice <- useful_data[ ,1]
colnames(useful_data) <- c("SalePrice", colnames(useful_data[,-1]))
k_value <- floor(sqrt(nrow(useful_data)))
model <- train.kknn(formula = SalePrice~., data=useful_data, kmax=k_value, kernel = "optimal")
new_dataframe <- data.frame(input$OverallQual, input$GrLivArea, input$GarageArea,
input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
input$YearBuilt, input$YearRemodAdd)
names(new_dataframe) <- c("OverallQual", "GrLivArea",  "GarageArea", "TotalBsmtSF", "X1stFlrSF", "FullBath", "TotRmsAbvGrd", "YearBuilt", "YearRemodAdd")
prediction2<- predict(model, new_dataframe)
#str(prediction2)
return (round(prediction2, digits = -2))
}
server <- shinyServer(function(input, output) {
output$prediction2 <- renderText({
paste("Predicted Value of ?", get_prediction(input))
})
})
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
#create front end application
ui <- shinyUI(fluidPage(
titlePanel("Iowa Homes Price Calculator"),
dashboardPage(skin = "black"),
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
numericInput(inputId = "OverallQual", label = "Overall Quality", value = 0, min = 0, step = 1),
numericInput(inputId = "GrLivArea", label = "Above grade (ground) living area in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "GarageArea", label = "Size of garage in square feet", value = 0, min = 0, step = 1),
numericInput(inputId = "TotalBsmtSF", label = "Total square feet of basement area", value = 0, min = 0, step = 1),
numericInput(inputId = "X1stFlrSF", label = "Area of first floor in square", value = 0, min = 0, step = 1),
numericInput(inputId = "FullBath", label = "Number of full bathrooms", value = 0, min = 0, step = 1),
numericInput(inputId = "TotRmsAbvGrd", label = "Total number of rooms above ground", value = 0, min = 0, step = 1),
numericInput(inputId = "YearBuilt", label = "Year house was built", value = 0, min = 0, step = 1),
numericInput(inputId = "YearRemodAdd", label = "Year house was remodelled", value = 0, min = 0, step = 1)
),
# Main panel for displaying outputs ----
mainPanel(
textOutput(outputId = "prediction2")
)
)
))
db_connection<- function(){
con = dbConnect(MySQL(), user='root', password='password', dbname='iowahomedatabase', host='localhost', port=3306)
# dbListTables(con)
query <- ("SELECT SalePrice, OverallQual, GrLivArea, GarageArea, TotalBsmtSF, X1stFlrSF, FullBath, TotRmsAbvGrd, YearBuilt, YearRemodAdd FROM Training")
useful_data <- dbGetQuery(con, query)
dbDisconnect(con)
}
get_prediction <- function(input){
# <- c(input$OverallQual, input$GrLivArea, input$ExterQual, input$GarageArea,
#             input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
#            input$YearBuilt, input$YearRemodAdd)
salesPrice <- useful_data[ ,1]
colnames(useful_data) <- c("SalePrice", colnames(useful_data[,-1]))
k_value <- floor(sqrt(nrow(useful_data)))
model <- train.kknn(formula = SalePrice~., data=useful_data, kmax=k_value, kernel = "optimal")
new_dataframe <- data.frame(input$OverallQual, input$GrLivArea, input$GarageArea,
input$TotalBsmtSF, input$X1stFlrSF, input$FullBath, input$TotRmsAbvGrd,
input$YearBuilt, input$YearRemodAdd)
names(new_dataframe) <- c("OverallQual", "GrLivArea",  "GarageArea", "TotalBsmtSF", "X1stFlrSF", "FullBath", "TotRmsAbvGrd", "YearBuilt", "YearRemodAdd")
prediction2<- predict(model, new_dataframe)
#str(prediction2)
return (round(prediction2, digits = -2))
}
server <- shinyServer(function(input, output) {
output$prediction2 <- renderText({
paste("Predicted Value of ?", get_prediction(input))
})
})
shinyApp(ui, server)
runApp('R/IowaHomesPredictionsShinySQL.r')
library(shiny); runApp('R/IowaHomesPredictionsShinySQL.r')
runApp('R/IowaHomesPredictionsShinySQL.r')
install.packages("devtools")
devtools::document()
?db_connection
?db_connection
devtools::document()
?db_connection
?db_connection
devtools::document()
?db_connection
devtools::document()
?db_connection
devtools::document()
?db_connection
devtools::document()
?get_prediction
?db_connection
?db_connection
devtools::document()
?db_connection
